package com.mncm.util;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.servlet.http.HttpServletRequest;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ResourceBundle;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

public class StringConverterUtil {

	private static JsonFactory factory 		 = new JsonFactory();
	private static final ObjectMapper mapper = new ObjectMapper(factory);
	
	static{
		DateFormat df = new SimpleDateFormat("MMM dd, yyyy HH:mm:ss a");
		mapper.setDateFormat(df);
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
		mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
		mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, true);

	}
	
	public static ObjectMapper getObjectMapper(){
		return mapper;
	}
	
	public static ResourceBundle getResource(){
		return ResourceBundle.getBundle("com/acti/util/application");
	}
	
	public static byte[] compressBytes( String data ) throws UnsupportedEncodingException , IOException
	{
		byte[] input = data.getBytes(); // the format... data is the total string
		Deflater df = new Deflater(Deflater.BEST_COMPRESSION); // this function mainly generate the byte code
		df.setInput( input );
		ByteArrayOutputStream baos = new ByteArrayOutputStream( input.length ); // we write the generated byte code in this array
		df.finish();
		byte[] buff = new byte [1024]; // segment segment pop....segment set 1024
		while ( !df.finished() )
			{
				int count = df.deflate( buff ); // returns the generated code... index
				baos.write( buff , 0 , count ); // write 4m 0 to count
			}
		baos.close();
		byte[] output = baos.toByteArray();
		return output;
	}
	
	public static String deCompressBytes( byte[] data ) throws UnsupportedEncodingException , IOException, DataFormatException
	{		
		ByteArrayOutputStream baos = null;
		
		String response = "";
		
		Inflater df = new Inflater(); // this function mainly generate the byte code
		df.setInput( data );
		
		baos = new ByteArrayOutputStream();
		
		byte[] buff = new byte [1024]; // segment segment pop....segment set 1024
		while ( !df.finished() )
		{
			int count = df.inflate( buff ); // returns the generated code... index
			baos.write(buff, 0, count);
		}
		
		if(baos != null){
			baos.close();
			response = new String(baos.toByteArray());
		}				
		
		return response;
	}
	
	
	public static String getJsonString(Object object){
		
		String jsonString = "";
		
		try{
			
			Writer strWriter = 	new StringWriter();	
			mapper.writeValue(strWriter, object);
			jsonString = strWriter.toString();
			
		}catch(Exception e){				
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);			
			System.out.println(sw.toString());
		}
		return jsonString;
	}
	
	public static Object getObjectFromJsonString(String jsonString, Class<?> classType){
		
		Object response = new Object();
		
		try{
			response = mapper.readValue(jsonString, classType);			
		}catch(Exception e){
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);			
			System.out.println(sw.toString());
		}
		
		return response;
	}
	
	public static String getBody(HttpServletRequest request) throws IOException {

	    String body = null;
	    StringBuilder stringBuilder = new StringBuilder();
	    BufferedReader bufferedReader = null;

	    try {
	        InputStream inputStream = request.getInputStream();
	        if (inputStream != null) {
	            bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
	            char[] charBuffer = new char[128];
	            int bytesRead = -1;
	            while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {
	                stringBuilder.append(charBuffer, 0, bytesRead);
	            }
	        } else {
	            stringBuilder.append("");
	        }
	    } catch (IOException ex) {
	        throw ex;
	    } finally {
	        if (bufferedReader != null) {
	            try {
	                bufferedReader.close();
	            } catch (IOException ex) {
	                throw ex;
	            }
	        }
	    }

	    body = stringBuilder.toString();
	    return body;
	}
	
	 public static String getRequestURL(HttpServletRequest request){
		 String requestUrl 	= request.getRequestURL().toString();
		 requestUrl 	    = requestUrl.split("/")[0] + "//"+ requestUrl.split("/")[2];
		 return requestUrl;
	 }


}
